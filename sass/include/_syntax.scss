    // Unstyled Text Color, and background color
    .z-code {
        color: var(--f1);//#ccc
        background-color: var(--bg);
    }
    // This is a comment
    .z-comment {//, .z-punctuation.z-definition.z-comment
        color: var(--c4);//#888
        font-style: italic;
    }
    // a  (int a;)
    .z-variable {
        color: var(--f1);
    }
    // "This is a string"
    .z-string {//, .z-constant.z-other.z-symbol
        color: var(--h4);
    }
    // 10  (a = 10;)
    .z-constant.z-numeric {
        color: var(--h2);
    }
    // /n
    .z-constant.z-character.z-escape {//, .z-string.z-regexp
        color: var(--h5);
    }
    // false, true, etc...
    .z-constant.z-language {
        color: var(--h2);
    }
    // BUF  (const BUF: usize = 10 * 1024;)
    .z-constant.z-other {//, .z-constant.z-character
        color: var(--h2);
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-variable.z-member {
    //    color: var(--h1);
    //}
    // use, crate, let, etc.
    .z-keyword {//, .z-keyword.z-operator.z-word
        color: var(--h6);
    }
    // = * - + /
    .z-keyword.z-operator {
        color: var(--h7);
    }
    // separators: commas, colons, etc.  terminator:  endline semicolon, etc.
    .z-punctuation.z-separator, .z-punctuation.z-terminator {
        color: var(--f1);
    }
    // () [] {}
    .z-punctuation.z-section {
        color: var(--f1);
    }
    //  .  ::
    .z-punctuation.z-accessor {
        color: var(--h2);
    }
    //  #  (#[cfg(test)])
    .z-punctuation.z-definition.z-annotation {
        color: var(--f1);
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-variable.z-other.z-dollar.z-only.z-js, .z-variable.z-other.z-object.z-dollar.z-only.z-js, .z-variable.z-type.z-dollar.z-only.z-js, .z-support.z-class.z-dollar.z-only.z-js {
    //    color: var(--h4);
    //}
    // const, pub, mut, Self, fn
    .z-storage {
        color: var(--h6);
    }
    // const, struct
    .z-storage.z-type {
        color: var(--h6);
    }
    // new, function names
    .z-entity.z-name.z-function {
        color: var(--h3);
    }
    // key in toml entries
    .z-entity.z-name {//, .z-entity.z-name.z-label
        color: var(--h3);
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-entity.z-other.z-inherited-class {
    //    color: var(--h6);
    //    text-decoration: underline;
    //}
    //  v1   (fn lookup(v1))
    .z-variable.z-parameter {
        color: var(--h2);
    }
    //  self  (self.html.push(c))
    .z-variable.z-language {
        color: var(--h3);
        font-style: italic;
    }
    // html tag name, eg:  html, head, meta, title, body, etc.
    .z-entity.z-name.z-tag {//, .z-meta.z-tag.z-sgml
        color: var(--h6);
    }
    // html tag brackets <>
    .z-punctuation.z-definition.z-tag.z-end, .z-punctuation.z-definition.z-tag.z-begin, .z-punctuation.z-definition.z-tag {
        color: var(--h6);
    }
    // html attribute name, eg: lang, charset
    .z-entity.z-other.z-attribute-name {
        color: var(--h3);
    }
    // function name as variable value, and annotation:  derive  (#[derive(Debug)])
    .z-variable.z-function, .z-variable.z-annotation {
        color: var(--h3);
    }
    // support function, eg:   extend  (self.html.extend(b"<span");)
    // macros, eg:  println!  print!  format!
    .z-support.z-function, .z-support.z-macro {
        color: var(--h1);
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-support.z-constant {
    //    color: var(--h2);
    //    font-style: italic;
    //}
    // type: Vec, Some, str, int
    // class:  Config  ($CONF = Config::getInstance()->getAll();)
    .z-support.z-type, .z-support.z-class {
        color: var(--h6);
        font-style: italic;
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-source.z-ruby .z-variable.z-other.z-readwrite {
    //    color: var(--h3);
    //}
    // superfluous, already have .z-entity.z-name.z-tag
    //.z-source.z-css .z-entity.z-name.z-tag, .z-source.z-sass .z-entity.z-name.z-tag, .z-source.z-scss .z-entity.z-name.z-tag, .z-source.z-less .z-entity.z-name.z-tag, .z-source.z-stylus .z-entity.z-name.z-tag {
    //    color: var(--h6);
    //}
    // property name, eg css: font-size, text-align, etc.
    .z-support.z-type.z-property-name {
        color: var(--h6);
    }
    //json
    .z-meta.z-mapping.z-key.z-json {
        .z-punctuation.z-definition.z-string.z-begin.z-json, .z-punctuation.z-definition.z-string.z-end.z-json, .z-string.z-quoted.z-double.z-json {
            color: var(--h2);
        }
    }
    // Figure out how to reproduce in code block otherwise don't include
    //.z-constant.z-numeric.z-line-number.z-match {
    //    color: var(--h6);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-entity.z-name.z-filename.z-find-in-files {
    //    color: var(--h4);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-message.z-error {
    //    color: var(--h1);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-string.z-other.z-link, .z-markup.z-underline.z-link {
    //    color: var(--h5);
    //    text-decoration: underline;
    //    font-style: italic;
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-punctuation.z-definition.z-image {
    //    color: var(--h3);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-meta.z-separator {
    //    color: var(--f1);
    //    background-color: var(--f1);
    //    font-weight: bold;
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-markup.z-list.z-numbered.z-bullet, .z-markup.z-list .z-punctuation.z-definition.z-list_item {
    //    color: var(--h5);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-text.z-html.z-markdown .z-markup.z-raw.z-inline {
    //    color: var(--h2);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-text.z-html.z-markdown .z-meta.z-dummy.z-line-break {
    //    color: var(--f1);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-markup.z-raw.z-block.z-fenced.z-markdown {
    //    color: var(--f1);
    //    background-color: var(--f1);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-punctuation.z-definition.z-fenced.z-markdown, .z-variable.z-language.z-fenced.z-markdown {
    //    color: var(--f1);
    //    background-color: var(--f1);
    //}
    // Figure out how to reproduce in code block otherwise don't include
    //.z-variable.z-language.z-fenced.z-markdown {
    //    color: var(--f1);
    //}
